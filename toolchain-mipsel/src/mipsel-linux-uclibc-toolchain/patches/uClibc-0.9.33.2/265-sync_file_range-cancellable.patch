libc: handle sync_file_range

 a2dc2ddb splice,sync_file_range: mark them as GNU extensions
 ff6efa44 libc: handle sync_file_range
 4721ac5f libc: Fix sync_file_range.c for MIPS64 N32 ABI

---

diff --git a/libc/sysdeps/linux/common/splice.c b/libc/sysdeps/linux/common/splice.c
--- a/libc/sysdeps/linux/common/splice.c
+++ b/libc/sysdeps/linux/common/splice.c
@@ -8,9 +8,10 @@
  */
 
 #include <sys/syscall.h>
-#include <fcntl.h>
 
-#ifdef __NR_splice
-_syscall6(ssize_t, splice, int, __fdin, __off64_t *, __offin, int, __fdout,
-	__off64_t *, __offout, size_t, __len, unsigned int, __flags)
+#if defined __NR_splice && defined __UCLIBC_HAS_LFS__ && defined __USE_GNU
+# include <fcntl.h>
+
+_syscall6(ssize_t, splice, int, __fdin, off64_t *, __offin, int, __fdout,
+	  off64_t *, __offout, size_t, __len, unsigned int, __flags)
 #endif
diff --git a/libc/sysdeps/linux/common/sync_file_range.c b/libc/sysdeps/linux/common/sync_file_range.c
--- a/libc/sysdeps/linux/common/sync_file_range.c
+++ b/libc/sysdeps/linux/common/sync_file_range.c
@@ -4,24 +4,37 @@
  *
  * Copyright (C) 2008 Bernhard Reutner-Fischer <uclibc@uclibc.org>
  *
- * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ * Licensed under the LGPL v2.1 or later, see the file COPYING.LIB in this tarball.
  */
 
 #include <sys/syscall.h>
-#if defined __USE_GNU
-#include <fcntl.h>
+#if defined __UCLIBC_HAS_LFS__ && defined __USE_GNU
+# include <bits/wordsize.h>
+# include <endian.h>
+# include <fcntl.h>
+# include <cancel.h>
 
-#if defined __NR_sync_file_range && defined __UCLIBC_HAS_LFS__
-#define __NR___syscall_sync_file_range __NR_sync_file_range
-static __always_inline _syscall6(int, __syscall_sync_file_range, int, fd,
-		off_t, offset_hi, off_t, offset_lo,
-		off_t, nbytes_hi, off_t, nbytes_lo, unsigned int, flags)
-int sync_file_range(int fd, off64_t offset, off64_t nbytes, unsigned int flags)
+# ifdef __NR_sync_file_range2
+#  undef __NR_sync_file_range
+#  define __NR_sync_file_range __NR_sync_file_range2
+# endif
+
+# ifdef __NR_sync_file_range
+static int __NC(sync_file_range)(int fd, off64_t offset, off64_t nbytes, unsigned int flags)
 {
-	return __syscall_sync_file_range(fd,
-		__LONG_LONG_PAIR((long)(offset >> 32), (long)(offset & 0xffffffff)),
-		__LONG_LONG_PAIR((long)(nbytes >> 32), (long)(nbytes & 0xffffffff)),
-		flags);
+#  if defined __powerpc__ && __WORDSIZE == 64
+	return INLINE_SYSCALL(sync_file_range, 4, fd, flags, offset, nbytes);
+#  elif defined __mips__ && _MIPS_SIM == _ABIO32
+	return INLINE_SYSCALL(sync_file_range, 7, fd, 0,
+			OFF64_HI_LO(offset), OFF64_HI_LO(nbytes), flags);
+#  elif defined __NR_sync_file_range2
+	return INLINE_SYSCALL(sync_file_range, 6, fd, flags,
+			OFF64_HI_LO(offset), OFF64_HI_LO(nbytes));
+#  else
+	return INLINE_SYSCALL(sync_file_range, 6, fd,
+			OFF64_HI_LO(offset), OFF64_HI_LO(nbytes), flags);
+#  endif
 }
-#endif
+CANCELLABLE_SYSCALL(int, sync_file_range, (int fd, off64_t offset, off64_t nbytes, unsigned int flags), (fd, offset, nbytes, flags))
+# endif
 #endif
-- 
