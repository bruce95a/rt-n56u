std::atomic<int*>::exchange(...) doesn't store correct value.

http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46914

--- gcc-4_5-branch/libstdc++-v3/ChangeLog	2011/02/01 18:15:39	169494
+++ gcc-4_5-branch/libstdc++-v3/ChangeLog	2011/02/01 18:15:56	169495
@@ -6,6 +6,13 @@
 
 	* GCC 4.4.6 released.
 
+2011-02-01  Paolo Carlini  <paolo.carlini@oracle.com>
+
+	PR libstdc++/46914
+	* include/bits/atomic_0.h (_ATOMIC_STORE_, _ATOMIC_MODIFY_,
+	_ATOMIC_CMPEXCHNG_): Rename __v -> __w, and __m -> __n, to
+	avoid name conflicts.
+
 2011-01-19  Graham Reed  <greed@pobox.com>
 
 	PR libstdc++/47354
--- gcc-4_5-branch/libstdc++-v3/include/bits/atomic_0.h	2011/02/01 18:15:39	169494
+++ gcc-4_5-branch/libstdc++-v3/include/bits/atomic_0.h	2011/02/01 18:15:56	169495
@@ -1,6 +1,6 @@
 // -*- C++ -*- header.
 
-// Copyright (C) 2008, 2009
+// Copyright (C) 2008, 2009, 2010, 2011
 // Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
@@ -49,34 +49,34 @@
     atomic_flag_clear_explicit(__g, __x);		       		   \
     __r; })
 
-#define _ATOMIC_STORE_(__a, __m, __x)					   \
+#define _ATOMIC_STORE_(__a, __n, __x)					   \
   ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;	   \
-    __typeof__(__m) __v = (__m);			       		   \
+    __typeof__(__n) __w = (__n);			       		   \
     volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \
     __atomic_flag_wait_explicit(__g, __x);				   \
-    *__p = __v;								   \
+    *__p = __w;								   \
     atomic_flag_clear_explicit(__g, __x);		       		   \
-    __v; })
+    __w; })
 
-#define _ATOMIC_MODIFY_(__a, __o, __m, __x)				   \
+#define _ATOMIC_MODIFY_(__a, __o, __n, __x)				   \
   ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;	   \
-    __typeof__(__m) __v = (__m);			       		   \
+    __typeof__(__n) __w = (__n);			       		   \
     volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \
     __atomic_flag_wait_explicit(__g, __x);				   \
     __typeof__ _ATOMIC_MEMBER_ __r = *__p;				   \
-    *__p __o __v;					       		   \
+    *__p __o __w;					       		   \
     atomic_flag_clear_explicit(__g, __x);		       		   \
     __r; })
 
-#define _ATOMIC_CMPEXCHNG_(__a, __e, __m, __x)				   \
+#define _ATOMIC_CMPEXCHNG_(__a, __e, __n, __x)				   \
   ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;	   \
     __typeof__(__e) __q = (__e);			       		   \
-    __typeof__(__m) __v = (__m);			       		   \
+    __typeof__(__n) __w = (__n);			       		   \
     bool __r;						       		   \
     volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \
     __atomic_flag_wait_explicit(__g, __x);				   \
     __typeof__ _ATOMIC_MEMBER_ __t__ = *__p;		       		   \
-    if (__t__ == *__q) { *__p = __v; __r = true; }			   \
+    if (__t__ == *__q) { *__p = __w; __r = true; }			   \
     else { *__q = __t__; __r = false; }		       			   \
     atomic_flag_clear_explicit(__g, __x);		       		   \
     __r; })
